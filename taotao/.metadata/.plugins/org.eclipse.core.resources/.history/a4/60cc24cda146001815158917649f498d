package service;

import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import dao.SeckillDao;
import dao.SuccessKilledDao;
import dto.Exposer;
import dto.SeckillExecution;
import enums.SeckillStatEnum;
import exception.RepeatKillException;
import exception.SeckillCloseException;
import exception.SeckillException;
import pojo.Seckill;
import pojo.SuccessKilled;

@Service
public class SeckillServiceImpl implements SeckillService {

	private Logger logger = (Logger) LoggerFactory.getLogger(this.getClass());
	@Autowired
	private SeckillDao seckillDao;
	@Autowired
	private SuccessKilledDao successKilledDao;
	
	//用于混淆MD5
	private final String salt = "sdjfaklAjKLLJASLDFLADF'A]]";
	
	@Override
	public List<Seckill> getSeckillList() {
		// TODO Auto-generated method stub
		return seckillDao.qureyAll(0, 4);
	}

	@Override
	public Seckill getById(long seckillId) {
		// TODO Auto-generated method stub
		return seckillDao.queryById(seckillId);
	}

	@Override
	public Exposer exportSeckillUrl(long seckillId) {
		// TODO Auto-generated method stub
		Seckill seckill = seckillDao.queryById(seckillId);
		if (seckill == null) {
			return new Exposer(false, seckillId);
		}
		Date startTime = seckill.getStartTime();
		Date endTime = seckill.getEndTime();
		Date nowTime = new Date();
		if (nowTime.getTime() < startTime.getTime() ||
				nowTime.getTime() > startTime.getTime()) {
			return new Exposer(false, seckillId,nowTime.getTime(),startTime.getTime(),endTime.getTime());
		}
		String md5 = null;
		return new Exposer(true, md5, seckillId);
	}

	private Exposer getMd5(long seckillId) {
		String base = seckillId + "/" + salt;
		String md5 = org.springframework.util.DigestUtils.md5DigestAsHex(base.getBytes());
		return new Exposer(true, md5, seckillId);
	}
	
	@Override
	public SeckillExecution executeSeckill(long seckillId, long userPhone, String md5)
			throws SeckillException, SeckillCloseException, RepeatKillException {
		// TODO Auto-generated method stub
		try {
			if (md5 == null || !md5.equals(getMd5(seckillId))) {
				throw new SeckillException("seckill data rewrite");
			}
			//执行秒杀逻辑：减库存 + 记录购买行为
			Date nowTime = new Date();
			int updateCount = seckillDao.reduceNumber(seckillId, nowTime);
			if (updateCount <= 0) {
				//没有更新操作,秒杀结束
				throw new SeckillCloseException("seckill is closed");
			} else {
				//记录购买行为
				int insertCount = successKilledDao.insertSuccessKilled(seckillId, userPhone);
				if (insertCount <= 0) {
					//重复秒杀
					throw new RepeatKillException("seckill repeated!");
				} else {
					//秒杀成功
					SuccessKilled successKilled = successKilledDao.queryByIdWithSeckill(seckillId, userPhone);
					return new SeckillExecution(seckillId, SeckillStatEnum.SUCCESS, successKilled);
				}
			}
		} catch (SeckillCloseException e1) {
			throw e1;
		} catch (RepeatKillException e2) {
			throw e2;
		}
		catch (Exception e) {
			// TODO Auto-generated catch block
			logger.error(e.getMessage(), e);
			//所有运行期异常转换成业务异常
			throw new SeckillException("seckill inner error:" + e.getMessage());
		}
		
	}

}
